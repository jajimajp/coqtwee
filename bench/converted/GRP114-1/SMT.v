(* Generated by tptp2coqp *)
Require Import SMTCoq.SMTCoq ZArith.
Local Open Scope Z_scope.

(* axioms *)
Variable a : Z.
Variable identity : Z.
Variable intersection : Z -> Z -> Z.
Variable inverse : Z -> Z.
Variable multiply : Z -> Z -> Z.
Variable negative_part : Z -> Z.
Variable positive_part : Z -> Z.
Variable union : Z -> Z -> Z.
Axiom ax_negative_part : forall X : Z, (negative_part X) =? (intersection X identity).
Axiom ax_positive_part : forall X : Z, (positive_part X) =? (union X identity).
Axiom ax_multiply_intersection2 : forall X Y Z : Z, (multiply (intersection Y Z) X) =? (intersection (multiply Y X) (multiply Z X)).
Axiom ax_multiply_union2 : forall X Y Z : Z, (multiply (union Y Z) X) =? (union (multiply Y X) (multiply Z X)).
Axiom ax_multiply_intersection1 : forall X Y Z : Z, (multiply X (intersection Y Z)) =? (intersection (multiply X Y) (multiply X Z)).
Axiom ax_multiply_union1 : forall X Y Z : Z, (multiply X (union Y Z)) =? (union (multiply X Y) (multiply X Z)).
Axiom ax_intersection_union_absorbtion : forall X Y : Z, (intersection (union X Y) Y) =? Y.
Axiom ax_union_intersection_absorbtion : forall X Y : Z, (union (intersection X Y) Y) =? Y.
Axiom ax_union_associative : forall X Y Z : Z, (union X (union Y Z)) =? (union (union X Y) Z).
Axiom ax_intersection_associative : forall X Y Z : Z, (intersection X (intersection Y Z)) =? (intersection (intersection X Y) Z).
Axiom ax_union_commutative : forall X Y : Z, (union X Y) =? (union Y X).
Axiom ax_intersection_commutative : forall X Y : Z, (intersection X Y) =? (intersection Y X).
Axiom ax_union_idempotent : forall X : Z, (union X X) =? X.
Axiom ax_intersection_idempotent : forall X : Z, (intersection X X) =? X.
Axiom ax_inverse_product_lemma : forall X Y : Z, (inverse (multiply X Y)) =? (multiply (inverse Y) (inverse X)).
Axiom ax_inverse_involution : forall X : Z, (inverse (inverse X)) =? X.
Axiom ax_inverse_of_identity : (inverse identity) =? identity.
Axiom ax_associativity : forall X Y Z : Z, (multiply (multiply X Y) Z) =? (multiply X (multiply Y Z)).
Axiom ax_left_inverse : forall X : Z, (multiply (inverse X) X) =? identity.
Axiom ax_left_identity : forall X : Z, (multiply identity X) =? X.

Add_lemmas ax_negative_part ax_positive_part ax_multiply_intersection2 ax_multiply_union2 ax_multiply_intersection1 ax_multiply_union1 ax_intersection_union_absorbtion ax_union_intersection_absorbtion ax_union_associative ax_intersection_associative ax_union_commutative ax_intersection_commutative ax_union_idempotent ax_intersection_idempotent ax_inverse_product_lemma ax_inverse_involution ax_inverse_of_identity ax_associativity ax_left_inverse ax_left_identity.

(* Goal *)
Theorem check : (multiply (positive_part a) (negative_part a)) =? a.
Proof.
  smt.
Qed.

Check check.

